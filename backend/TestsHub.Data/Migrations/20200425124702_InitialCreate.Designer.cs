// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestHub.Data.DataModel;

namespace TestHub.Data.Migrations
{
    [DbContext(typeof(TestHubDBContext))]
    [Migration("20200425124702_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TestHub.Data.DataModel.Coverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LinesCovered")
                        .HasColumnType("int");

                    b.Property<int>("LinesValid")
                        .HasColumnType("int");

                    b.Property<int>("TestRunId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestRunId")
                        .IsUnique();

                    b.ToTable("Coverage");
                });

            modelBuilder.Entity("TestHub.Data.DataModel.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("TestHub.Data.DataModel.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TestHub.Data.DataModel.TestCase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ClassName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("File")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("SystemOut")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TestOutput")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TestRunId")
                        .HasColumnType("int");

                    b.Property<int?>("TestSuiteId")
                        .HasColumnType("int");

                    b.Property<decimal>("Time")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("TestRunId");

                    b.HasIndex("TestSuiteId");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("TestHub.Data.DataModel.TestRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Branch")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CommitId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("TestCasesCount")
                        .HasColumnType("int");

                    b.Property<string>("TestRunName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Time")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("TestRuns");
                });

            modelBuilder.Entity("TestHub.Data.DataModel.TestSuite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Hostname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("JUnitId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Package")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Time")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TestSuite");
                });

            modelBuilder.Entity("TestHub.Data.DataModel.Coverage", b =>
                {
                    b.HasOne("TestHub.Data.DataModel.TestRun", "TestRun")
                        .WithOne("Coverage")
                        .HasForeignKey("TestHub.Data.DataModel.Coverage", "TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestHub.Data.DataModel.Project", b =>
                {
                    b.HasOne("TestHub.Data.DataModel.Organisation", "Organisation")
                        .WithMany("Projects")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestHub.Data.DataModel.TestCase", b =>
                {
                    b.HasOne("TestHub.Data.DataModel.TestRun", "TestRun")
                        .WithMany("TestCases")
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestHub.Data.DataModel.TestSuite", "TestSuite")
                        .WithMany("TestCases")
                        .HasForeignKey("TestSuiteId");
                });

            modelBuilder.Entity("TestHub.Data.DataModel.TestRun", b =>
                {
                    b.HasOne("TestHub.Data.DataModel.Project", "Project")
                        .WithMany("TestRuns")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
